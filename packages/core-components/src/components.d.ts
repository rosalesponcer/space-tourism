/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { Person } from "packages/core-components/src/global/interfaces/Person";
import { TextSize } from "packages/core-components/src/global/types/TextSize";
export namespace Components {
    interface UiButton {
    }
    interface UiCrewSlider {
    }
    interface UiHamburgerButton {
        "first": string;
    }
    interface UiHeader {
        "currentRoute": string;
    }
    interface UiLogo {
    }
    interface UiMainButton {
    }
    interface UiNav {
        "currentRoute": string;
        "last": string;
        "navList": NavList[];
    }
    interface UiNavItem {
        "center": boolean;
        "name": string;
        "navActive": boolean;
        "navNumber": string;
        "onlyBottom": boolean;
    }
    interface UiPerson {
        "personImg": string;
    }
    interface UiPersonSlider {
        "crewKeys": string[];
        "currentPerson": Person;
    }
    interface UiPlanet {
        "planetKey": string;
    }
    interface UiPlanetSlider {
    }
    interface UiPlanetTab {
        "currentKey": string;
        "planetKeys": string[];
    }
    interface UiSeparator {
    }
    interface UiText {
        "color": 'white' | 'purple' | 'dark';
        "size": TextSize;
        "type": 'block' | 'inline';
        "weight": 'normal' | 'bold';
    }
}
export interface UiHamburgerButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUiHamburgerButtonElement;
}
export interface UiHeaderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUiHeaderElement;
}
export interface UiNavCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUiNavElement;
}
export interface UiPersonSliderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUiPersonSliderElement;
}
export interface UiPlanetTabCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUiPlanetTabElement;
}
declare global {
    interface HTMLUiButtonElement extends Components.UiButton, HTMLStencilElement {
    }
    var HTMLUiButtonElement: {
        prototype: HTMLUiButtonElement;
        new (): HTMLUiButtonElement;
    };
    interface HTMLUiCrewSliderElement extends Components.UiCrewSlider, HTMLStencilElement {
    }
    var HTMLUiCrewSliderElement: {
        prototype: HTMLUiCrewSliderElement;
        new (): HTMLUiCrewSliderElement;
    };
    interface HTMLUiHamburgerButtonElement extends Components.UiHamburgerButton, HTMLStencilElement {
    }
    var HTMLUiHamburgerButtonElement: {
        prototype: HTMLUiHamburgerButtonElement;
        new (): HTMLUiHamburgerButtonElement;
    };
    interface HTMLUiHeaderElement extends Components.UiHeader, HTMLStencilElement {
    }
    var HTMLUiHeaderElement: {
        prototype: HTMLUiHeaderElement;
        new (): HTMLUiHeaderElement;
    };
    interface HTMLUiLogoElement extends Components.UiLogo, HTMLStencilElement {
    }
    var HTMLUiLogoElement: {
        prototype: HTMLUiLogoElement;
        new (): HTMLUiLogoElement;
    };
    interface HTMLUiMainButtonElement extends Components.UiMainButton, HTMLStencilElement {
    }
    var HTMLUiMainButtonElement: {
        prototype: HTMLUiMainButtonElement;
        new (): HTMLUiMainButtonElement;
    };
    interface HTMLUiNavElement extends Components.UiNav, HTMLStencilElement {
    }
    var HTMLUiNavElement: {
        prototype: HTMLUiNavElement;
        new (): HTMLUiNavElement;
    };
    interface HTMLUiNavItemElement extends Components.UiNavItem, HTMLStencilElement {
    }
    var HTMLUiNavItemElement: {
        prototype: HTMLUiNavItemElement;
        new (): HTMLUiNavItemElement;
    };
    interface HTMLUiPersonElement extends Components.UiPerson, HTMLStencilElement {
    }
    var HTMLUiPersonElement: {
        prototype: HTMLUiPersonElement;
        new (): HTMLUiPersonElement;
    };
    interface HTMLUiPersonSliderElement extends Components.UiPersonSlider, HTMLStencilElement {
    }
    var HTMLUiPersonSliderElement: {
        prototype: HTMLUiPersonSliderElement;
        new (): HTMLUiPersonSliderElement;
    };
    interface HTMLUiPlanetElement extends Components.UiPlanet, HTMLStencilElement {
    }
    var HTMLUiPlanetElement: {
        prototype: HTMLUiPlanetElement;
        new (): HTMLUiPlanetElement;
    };
    interface HTMLUiPlanetSliderElement extends Components.UiPlanetSlider, HTMLStencilElement {
    }
    var HTMLUiPlanetSliderElement: {
        prototype: HTMLUiPlanetSliderElement;
        new (): HTMLUiPlanetSliderElement;
    };
    interface HTMLUiPlanetTabElement extends Components.UiPlanetTab, HTMLStencilElement {
    }
    var HTMLUiPlanetTabElement: {
        prototype: HTMLUiPlanetTabElement;
        new (): HTMLUiPlanetTabElement;
    };
    interface HTMLUiSeparatorElement extends Components.UiSeparator, HTMLStencilElement {
    }
    var HTMLUiSeparatorElement: {
        prototype: HTMLUiSeparatorElement;
        new (): HTMLUiSeparatorElement;
    };
    interface HTMLUiTextElement extends Components.UiText, HTMLStencilElement {
    }
    var HTMLUiTextElement: {
        prototype: HTMLUiTextElement;
        new (): HTMLUiTextElement;
    };
    interface HTMLElementTagNameMap {
        "ui-button": HTMLUiButtonElement;
        "ui-crew-slider": HTMLUiCrewSliderElement;
        "ui-hamburger-button": HTMLUiHamburgerButtonElement;
        "ui-header": HTMLUiHeaderElement;
        "ui-logo": HTMLUiLogoElement;
        "ui-main-button": HTMLUiMainButtonElement;
        "ui-nav": HTMLUiNavElement;
        "ui-nav-item": HTMLUiNavItemElement;
        "ui-person": HTMLUiPersonElement;
        "ui-person-slider": HTMLUiPersonSliderElement;
        "ui-planet": HTMLUiPlanetElement;
        "ui-planet-slider": HTMLUiPlanetSliderElement;
        "ui-planet-tab": HTMLUiPlanetTabElement;
        "ui-separator": HTMLUiSeparatorElement;
        "ui-text": HTMLUiTextElement;
    }
}
declare namespace LocalJSX {
    interface UiButton {
    }
    interface UiCrewSlider {
    }
    interface UiHamburgerButton {
        "first"?: string;
        "onClickActive"?: (event: UiHamburgerButtonCustomEvent<boolean>) => void;
    }
    interface UiHeader {
        "currentRoute"?: string;
        "onClickNavigate"?: (event: UiHeaderCustomEvent<string>) => void;
    }
    interface UiLogo {
    }
    interface UiMainButton {
    }
    interface UiNav {
        "currentRoute"?: string;
        "last"?: string;
        "navList"?: NavList[];
        "onClickNav"?: (event: UiNavCustomEvent<string>) => void;
    }
    interface UiNavItem {
        "center"?: boolean;
        "name"?: string;
        "navActive"?: boolean;
        "navNumber"?: string;
        "onlyBottom"?: boolean;
    }
    interface UiPerson {
        "personImg"?: string;
    }
    interface UiPersonSlider {
        "crewKeys"?: string[];
        "currentPerson"?: Person;
        "onChangePerson"?: (event: UiPersonSliderCustomEvent<string>) => void;
    }
    interface UiPlanet {
        "planetKey": string;
    }
    interface UiPlanetSlider {
    }
    interface UiPlanetTab {
        "currentKey"?: string;
        "onClickTab"?: (event: UiPlanetTabCustomEvent<string>) => void;
        "planetKeys"?: string[];
    }
    interface UiSeparator {
    }
    interface UiText {
        "color"?: 'white' | 'purple' | 'dark';
        "size"?: TextSize;
        "type"?: 'block' | 'inline';
        "weight"?: 'normal' | 'bold';
    }
    interface IntrinsicElements {
        "ui-button": UiButton;
        "ui-crew-slider": UiCrewSlider;
        "ui-hamburger-button": UiHamburgerButton;
        "ui-header": UiHeader;
        "ui-logo": UiLogo;
        "ui-main-button": UiMainButton;
        "ui-nav": UiNav;
        "ui-nav-item": UiNavItem;
        "ui-person": UiPerson;
        "ui-person-slider": UiPersonSlider;
        "ui-planet": UiPlanet;
        "ui-planet-slider": UiPlanetSlider;
        "ui-planet-tab": UiPlanetTab;
        "ui-separator": UiSeparator;
        "ui-text": UiText;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "ui-button": LocalJSX.UiButton & JSXBase.HTMLAttributes<HTMLUiButtonElement>;
            "ui-crew-slider": LocalJSX.UiCrewSlider & JSXBase.HTMLAttributes<HTMLUiCrewSliderElement>;
            "ui-hamburger-button": LocalJSX.UiHamburgerButton & JSXBase.HTMLAttributes<HTMLUiHamburgerButtonElement>;
            "ui-header": LocalJSX.UiHeader & JSXBase.HTMLAttributes<HTMLUiHeaderElement>;
            "ui-logo": LocalJSX.UiLogo & JSXBase.HTMLAttributes<HTMLUiLogoElement>;
            "ui-main-button": LocalJSX.UiMainButton & JSXBase.HTMLAttributes<HTMLUiMainButtonElement>;
            "ui-nav": LocalJSX.UiNav & JSXBase.HTMLAttributes<HTMLUiNavElement>;
            "ui-nav-item": LocalJSX.UiNavItem & JSXBase.HTMLAttributes<HTMLUiNavItemElement>;
            "ui-person": LocalJSX.UiPerson & JSXBase.HTMLAttributes<HTMLUiPersonElement>;
            "ui-person-slider": LocalJSX.UiPersonSlider & JSXBase.HTMLAttributes<HTMLUiPersonSliderElement>;
            "ui-planet": LocalJSX.UiPlanet & JSXBase.HTMLAttributes<HTMLUiPlanetElement>;
            "ui-planet-slider": LocalJSX.UiPlanetSlider & JSXBase.HTMLAttributes<HTMLUiPlanetSliderElement>;
            "ui-planet-tab": LocalJSX.UiPlanetTab & JSXBase.HTMLAttributes<HTMLUiPlanetTabElement>;
            "ui-separator": LocalJSX.UiSeparator & JSXBase.HTMLAttributes<HTMLUiSeparatorElement>;
            "ui-text": LocalJSX.UiText & JSXBase.HTMLAttributes<HTMLUiTextElement>;
        }
    }
}
